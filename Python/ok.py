# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ok', [dirname(__file__)])
        except ImportError:
            import _ok
            return _ok
        if fp is not None:
            try:
                _mod = imp.load_module('_ok', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ok = swig_import_helper()
    del swig_import_helper
else:
    import _ok
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


OK_MAX_DEVICEID_LENGTH = _ok.OK_MAX_DEVICEID_LENGTH
OK_MAX_SERIALNUMBER_LENGTH = _ok.OK_MAX_SERIALNUMBER_LENGTH
OK_MAX_PRODUCT_NAME_LENGTH = _ok.OK_MAX_PRODUCT_NAME_LENGTH
OK_USBSPEED_UNKNOWN = _ok.OK_USBSPEED_UNKNOWN
OK_USBSPEED_FULL = _ok.OK_USBSPEED_FULL
OK_USBSPEED_HIGH = _ok.OK_USBSPEED_HIGH
OK_USBSPEED_SUPER = _ok.OK_USBSPEED_SUPER
okUSBSPEED_UNKNOWN = _ok.okUSBSPEED_UNKNOWN
okUSBSPEED_FULL = _ok.okUSBSPEED_FULL
okUSBSPEED_HIGH = _ok.okUSBSPEED_HIGH
okUSBSPEED_SUPER = _ok.okUSBSPEED_SUPER
OK_INTERFACE_UNKNOWN = _ok.OK_INTERFACE_UNKNOWN
OK_INTERFACE_USB2 = _ok.OK_INTERFACE_USB2
OK_INTERFACE_PCIE = _ok.OK_INTERFACE_PCIE
OK_INTERFACE_USB3 = _ok.OK_INTERFACE_USB3
okDEVICEINTERFACE_UNKNOWN = _ok.okDEVICEINTERFACE_UNKNOWN
okDEVICEINTERFACE_USB2 = _ok.okDEVICEINTERFACE_USB2
okDEVICEINTERFACE_PCIE = _ok.okDEVICEINTERFACE_PCIE
okDEVICEINTERFACE_USB3 = _ok.okDEVICEINTERFACE_USB3
OK_PRODUCT_UNKNOWN = _ok.OK_PRODUCT_UNKNOWN
OK_PRODUCT_XEM3001V1 = _ok.OK_PRODUCT_XEM3001V1
OK_PRODUCT_XEM3001V2 = _ok.OK_PRODUCT_XEM3001V2
OK_PRODUCT_XEM3010 = _ok.OK_PRODUCT_XEM3010
OK_PRODUCT_XEM3005 = _ok.OK_PRODUCT_XEM3005
OK_PRODUCT_XEM3001CL = _ok.OK_PRODUCT_XEM3001CL
OK_PRODUCT_XEM3020 = _ok.OK_PRODUCT_XEM3020
OK_PRODUCT_XEM3050 = _ok.OK_PRODUCT_XEM3050
OK_PRODUCT_XEM9002 = _ok.OK_PRODUCT_XEM9002
OK_PRODUCT_XEM3001RB = _ok.OK_PRODUCT_XEM3001RB
OK_PRODUCT_XEM5010 = _ok.OK_PRODUCT_XEM5010
OK_PRODUCT_XEM6110LX45 = _ok.OK_PRODUCT_XEM6110LX45
OK_PRODUCT_XEM6001 = _ok.OK_PRODUCT_XEM6001
OK_PRODUCT_XEM6010LX45 = _ok.OK_PRODUCT_XEM6010LX45
OK_PRODUCT_XEM6010LX150 = _ok.OK_PRODUCT_XEM6010LX150
OK_PRODUCT_XEM6110LX150 = _ok.OK_PRODUCT_XEM6110LX150
OK_PRODUCT_XEM6006LX9 = _ok.OK_PRODUCT_XEM6006LX9
OK_PRODUCT_XEM6006LX16 = _ok.OK_PRODUCT_XEM6006LX16
OK_PRODUCT_XEM6006LX25 = _ok.OK_PRODUCT_XEM6006LX25
OK_PRODUCT_XEM5010LX110 = _ok.OK_PRODUCT_XEM5010LX110
OK_PRODUCT_ZEM4310 = _ok.OK_PRODUCT_ZEM4310
OK_PRODUCT_XEM6310LX45 = _ok.OK_PRODUCT_XEM6310LX45
OK_PRODUCT_XEM6310LX150 = _ok.OK_PRODUCT_XEM6310LX150
OK_PRODUCT_XEM6110V2LX45 = _ok.OK_PRODUCT_XEM6110V2LX45
OK_PRODUCT_XEM6110V2LX150 = _ok.OK_PRODUCT_XEM6110V2LX150
OK_PRODUCT_XEM6002LX9 = _ok.OK_PRODUCT_XEM6002LX9
OK_PRODUCT_XEM6310MTLX45T = _ok.OK_PRODUCT_XEM6310MTLX45T
OK_PRODUCT_XEM6320LX130T = _ok.OK_PRODUCT_XEM6320LX130T
okPRODUCT_UNKNOWN = _ok.okPRODUCT_UNKNOWN
okPRODUCT_XEM3001V1 = _ok.okPRODUCT_XEM3001V1
okPRODUCT_XEM3001V2 = _ok.okPRODUCT_XEM3001V2
okPRODUCT_XEM3010 = _ok.okPRODUCT_XEM3010
okPRODUCT_XEM3005 = _ok.okPRODUCT_XEM3005
okPRODUCT_XEM3001CL = _ok.okPRODUCT_XEM3001CL
okPRODUCT_XEM3020 = _ok.okPRODUCT_XEM3020
okPRODUCT_XEM3050 = _ok.okPRODUCT_XEM3050
okPRODUCT_XEM9002 = _ok.okPRODUCT_XEM9002
okPRODUCT_XEM3001RB = _ok.okPRODUCT_XEM3001RB
okPRODUCT_XEM5010 = _ok.okPRODUCT_XEM5010
okPRODUCT_XEM6110LX45 = _ok.okPRODUCT_XEM6110LX45
okPRODUCT_XEM6001 = _ok.okPRODUCT_XEM6001
okPRODUCT_XEM6010LX45 = _ok.okPRODUCT_XEM6010LX45
okPRODUCT_XEM6010LX150 = _ok.okPRODUCT_XEM6010LX150
okPRODUCT_XEM6110LX150 = _ok.okPRODUCT_XEM6110LX150
okPRODUCT_XEM6006LX9 = _ok.okPRODUCT_XEM6006LX9
okPRODUCT_XEM6006LX16 = _ok.okPRODUCT_XEM6006LX16
okPRODUCT_XEM6006LX25 = _ok.okPRODUCT_XEM6006LX25
okPRODUCT_XEM5010LX110 = _ok.okPRODUCT_XEM5010LX110
okPRODUCT_ZEM4310 = _ok.okPRODUCT_ZEM4310
okPRODUCT_XEM6310LX45 = _ok.okPRODUCT_XEM6310LX45
okPRODUCT_XEM6310LX150 = _ok.okPRODUCT_XEM6310LX150
okPRODUCT_XEM6110V2LX45 = _ok.okPRODUCT_XEM6110V2LX45
okPRODUCT_XEM6110V2LX150 = _ok.okPRODUCT_XEM6110V2LX150
okPRODUCT_XEM6002LX9 = _ok.okPRODUCT_XEM6002LX9
okPRODUCT_XEM6310MTLX45T = _ok.okPRODUCT_XEM6310MTLX45T
okPRODUCT_XEM6320LX130T = _ok.okPRODUCT_XEM6320LX130T
okREGISTER_SET_ENTRIES = _ok.okREGISTER_SET_ENTRIES
class okTRegisterEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, okTRegisterEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, okTRegisterEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _ok.okTRegisterEntry_address_set
    __swig_getmethods__["address"] = _ok.okTRegisterEntry_address_get
    if _newclass:address = _swig_property(_ok.okTRegisterEntry_address_get, _ok.okTRegisterEntry_address_set)
    __swig_setmethods__["data"] = _ok.okTRegisterEntry_data_set
    __swig_getmethods__["data"] = _ok.okTRegisterEntry_data_get
    if _newclass:data = _swig_property(_ok.okTRegisterEntry_data_get, _ok.okTRegisterEntry_data_set)
    def __init__(self): 
        this = _ok.new_okTRegisterEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_okTRegisterEntry
    __del__ = lambda self : None;
okTRegisterEntry_swigregister = _ok.okTRegisterEntry_swigregister
okTRegisterEntry_swigregister(okTRegisterEntry)

class okTRegisterSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, okTRegisterSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, okTRegisterSet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _ok.okTRegisterSet_count_set
    __swig_getmethods__["count"] = _ok.okTRegisterSet_count_get
    if _newclass:count = _swig_property(_ok.okTRegisterSet_count_get, _ok.okTRegisterSet_count_set)
    __swig_setmethods__["entries"] = _ok.okTRegisterSet_entries_set
    __swig_getmethods__["entries"] = _ok.okTRegisterSet_entries_get
    if _newclass:entries = _swig_property(_ok.okTRegisterSet_entries_get, _ok.okTRegisterSet_entries_set)
    def __init__(self): 
        this = _ok.new_okTRegisterSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_okTRegisterSet
    __del__ = lambda self : None;
okTRegisterSet_swigregister = _ok.okTRegisterSet_swigregister
okTRegisterSet_swigregister(okTRegisterSet)

class okTTriggerEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, okTTriggerEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, okTTriggerEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _ok.okTTriggerEntry_address_set
    __swig_getmethods__["address"] = _ok.okTTriggerEntry_address_get
    if _newclass:address = _swig_property(_ok.okTTriggerEntry_address_get, _ok.okTTriggerEntry_address_set)
    __swig_setmethods__["mask"] = _ok.okTTriggerEntry_mask_set
    __swig_getmethods__["mask"] = _ok.okTTriggerEntry_mask_get
    if _newclass:mask = _swig_property(_ok.okTTriggerEntry_mask_get, _ok.okTTriggerEntry_mask_set)
    def __init__(self): 
        this = _ok.new_okTTriggerEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_okTTriggerEntry
    __del__ = lambda self : None;
okTTriggerEntry_swigregister = _ok.okTTriggerEntry_swigregister
okTTriggerEntry_swigregister(okTTriggerEntry)

okFPGARESETPROFILE_MAGIC = _ok.okFPGARESETPROFILE_MAGIC
class okTFPGAResetProfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, okTFPGAResetProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, okTFPGAResetProfile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magic"] = _ok.okTFPGAResetProfile_magic_set
    __swig_getmethods__["magic"] = _ok.okTFPGAResetProfile_magic_get
    if _newclass:magic = _swig_property(_ok.okTFPGAResetProfile_magic_get, _ok.okTFPGAResetProfile_magic_set)
    __swig_setmethods__["configFileLocation"] = _ok.okTFPGAResetProfile_configFileLocation_set
    __swig_getmethods__["configFileLocation"] = _ok.okTFPGAResetProfile_configFileLocation_get
    if _newclass:configFileLocation = _swig_property(_ok.okTFPGAResetProfile_configFileLocation_get, _ok.okTFPGAResetProfile_configFileLocation_set)
    __swig_setmethods__["configFileLength"] = _ok.okTFPGAResetProfile_configFileLength_set
    __swig_getmethods__["configFileLength"] = _ok.okTFPGAResetProfile_configFileLength_get
    if _newclass:configFileLength = _swig_property(_ok.okTFPGAResetProfile_configFileLength_get, _ok.okTFPGAResetProfile_configFileLength_set)
    __swig_setmethods__["doneWaitUS"] = _ok.okTFPGAResetProfile_doneWaitUS_set
    __swig_getmethods__["doneWaitUS"] = _ok.okTFPGAResetProfile_doneWaitUS_get
    if _newclass:doneWaitUS = _swig_property(_ok.okTFPGAResetProfile_doneWaitUS_get, _ok.okTFPGAResetProfile_doneWaitUS_set)
    __swig_setmethods__["resetWaitUS"] = _ok.okTFPGAResetProfile_resetWaitUS_set
    __swig_getmethods__["resetWaitUS"] = _ok.okTFPGAResetProfile_resetWaitUS_get
    if _newclass:resetWaitUS = _swig_property(_ok.okTFPGAResetProfile_resetWaitUS_get, _ok.okTFPGAResetProfile_resetWaitUS_set)
    __swig_setmethods__["registerWaitUS"] = _ok.okTFPGAResetProfile_registerWaitUS_set
    __swig_getmethods__["registerWaitUS"] = _ok.okTFPGAResetProfile_registerWaitUS_get
    if _newclass:registerWaitUS = _swig_property(_ok.okTFPGAResetProfile_registerWaitUS_get, _ok.okTFPGAResetProfile_registerWaitUS_set)
    __swig_setmethods__["padBytes1"] = _ok.okTFPGAResetProfile_padBytes1_set
    __swig_getmethods__["padBytes1"] = _ok.okTFPGAResetProfile_padBytes1_get
    if _newclass:padBytes1 = _swig_property(_ok.okTFPGAResetProfile_padBytes1_get, _ok.okTFPGAResetProfile_padBytes1_set)
    __swig_setmethods__["wireInValues"] = _ok.okTFPGAResetProfile_wireInValues_set
    __swig_getmethods__["wireInValues"] = _ok.okTFPGAResetProfile_wireInValues_get
    if _newclass:wireInValues = _swig_property(_ok.okTFPGAResetProfile_wireInValues_get, _ok.okTFPGAResetProfile_wireInValues_set)
    __swig_setmethods__["registerEntryCount"] = _ok.okTFPGAResetProfile_registerEntryCount_set
    __swig_getmethods__["registerEntryCount"] = _ok.okTFPGAResetProfile_registerEntryCount_get
    if _newclass:registerEntryCount = _swig_property(_ok.okTFPGAResetProfile_registerEntryCount_get, _ok.okTFPGAResetProfile_registerEntryCount_set)
    __swig_setmethods__["registerEntries"] = _ok.okTFPGAResetProfile_registerEntries_set
    __swig_getmethods__["registerEntries"] = _ok.okTFPGAResetProfile_registerEntries_get
    if _newclass:registerEntries = _swig_property(_ok.okTFPGAResetProfile_registerEntries_get, _ok.okTFPGAResetProfile_registerEntries_set)
    __swig_setmethods__["triggerEntryCount"] = _ok.okTFPGAResetProfile_triggerEntryCount_set
    __swig_getmethods__["triggerEntryCount"] = _ok.okTFPGAResetProfile_triggerEntryCount_get
    if _newclass:triggerEntryCount = _swig_property(_ok.okTFPGAResetProfile_triggerEntryCount_get, _ok.okTFPGAResetProfile_triggerEntryCount_set)
    __swig_setmethods__["triggerEntries"] = _ok.okTFPGAResetProfile_triggerEntries_set
    __swig_getmethods__["triggerEntries"] = _ok.okTFPGAResetProfile_triggerEntries_get
    if _newclass:triggerEntries = _swig_property(_ok.okTFPGAResetProfile_triggerEntries_get, _ok.okTFPGAResetProfile_triggerEntries_set)
    __swig_setmethods__["padBytes2"] = _ok.okTFPGAResetProfile_padBytes2_set
    __swig_getmethods__["padBytes2"] = _ok.okTFPGAResetProfile_padBytes2_get
    if _newclass:padBytes2 = _swig_property(_ok.okTFPGAResetProfile_padBytes2_get, _ok.okTFPGAResetProfile_padBytes2_set)
    def __init__(self): 
        this = _ok.new_okTFPGAResetProfile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_okTFPGAResetProfile
    __del__ = lambda self : None;
okTFPGAResetProfile_swigregister = _ok.okTFPGAResetProfile_swigregister
okTFPGAResetProfile_swigregister(okTFPGAResetProfile)

class okTFlashLayout(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, okTFlashLayout, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, okTFlashLayout, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sectorCount"] = _ok.okTFlashLayout_sectorCount_set
    __swig_getmethods__["sectorCount"] = _ok.okTFlashLayout_sectorCount_get
    if _newclass:sectorCount = _swig_property(_ok.okTFlashLayout_sectorCount_get, _ok.okTFlashLayout_sectorCount_set)
    __swig_setmethods__["sectorSize"] = _ok.okTFlashLayout_sectorSize_set
    __swig_getmethods__["sectorSize"] = _ok.okTFlashLayout_sectorSize_get
    if _newclass:sectorSize = _swig_property(_ok.okTFlashLayout_sectorSize_get, _ok.okTFlashLayout_sectorSize_set)
    __swig_setmethods__["pageSize"] = _ok.okTFlashLayout_pageSize_set
    __swig_getmethods__["pageSize"] = _ok.okTFlashLayout_pageSize_get
    if _newclass:pageSize = _swig_property(_ok.okTFlashLayout_pageSize_get, _ok.okTFlashLayout_pageSize_set)
    __swig_setmethods__["minUserSector"] = _ok.okTFlashLayout_minUserSector_set
    __swig_getmethods__["minUserSector"] = _ok.okTFlashLayout_minUserSector_get
    if _newclass:minUserSector = _swig_property(_ok.okTFlashLayout_minUserSector_get, _ok.okTFlashLayout_minUserSector_set)
    __swig_setmethods__["maxUserSector"] = _ok.okTFlashLayout_maxUserSector_set
    __swig_getmethods__["maxUserSector"] = _ok.okTFlashLayout_maxUserSector_get
    if _newclass:maxUserSector = _swig_property(_ok.okTFlashLayout_maxUserSector_get, _ok.okTFlashLayout_maxUserSector_set)
    def __init__(self): 
        this = _ok.new_okTFlashLayout()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_okTFlashLayout
    __del__ = lambda self : None;
okTFlashLayout_swigregister = _ok.okTFlashLayout_swigregister
okTFlashLayout_swigregister(okTFlashLayout)

class okTDeviceMatchInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, okTDeviceMatchInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, okTDeviceMatchInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["productName"] = _ok.okTDeviceMatchInfo_productName_set
    __swig_getmethods__["productName"] = _ok.okTDeviceMatchInfo_productName_get
    if _newclass:productName = _swig_property(_ok.okTDeviceMatchInfo_productName_get, _ok.okTDeviceMatchInfo_productName_set)
    __swig_setmethods__["productBaseID"] = _ok.okTDeviceMatchInfo_productBaseID_set
    __swig_getmethods__["productBaseID"] = _ok.okTDeviceMatchInfo_productBaseID_get
    if _newclass:productBaseID = _swig_property(_ok.okTDeviceMatchInfo_productBaseID_get, _ok.okTDeviceMatchInfo_productBaseID_set)
    __swig_setmethods__["productID"] = _ok.okTDeviceMatchInfo_productID_set
    __swig_getmethods__["productID"] = _ok.okTDeviceMatchInfo_productID_get
    if _newclass:productID = _swig_property(_ok.okTDeviceMatchInfo_productID_get, _ok.okTDeviceMatchInfo_productID_set)
    __swig_setmethods__["usbVID"] = _ok.okTDeviceMatchInfo_usbVID_set
    __swig_getmethods__["usbVID"] = _ok.okTDeviceMatchInfo_usbVID_get
    if _newclass:usbVID = _swig_property(_ok.okTDeviceMatchInfo_usbVID_get, _ok.okTDeviceMatchInfo_usbVID_set)
    __swig_setmethods__["usbPID"] = _ok.okTDeviceMatchInfo_usbPID_set
    __swig_getmethods__["usbPID"] = _ok.okTDeviceMatchInfo_usbPID_get
    if _newclass:usbPID = _swig_property(_ok.okTDeviceMatchInfo_usbPID_get, _ok.okTDeviceMatchInfo_usbPID_set)
    __swig_setmethods__["pciDID"] = _ok.okTDeviceMatchInfo_pciDID_set
    __swig_getmethods__["pciDID"] = _ok.okTDeviceMatchInfo_pciDID_get
    if _newclass:pciDID = _swig_property(_ok.okTDeviceMatchInfo_pciDID_get, _ok.okTDeviceMatchInfo_pciDID_set)
    def __init__(self): 
        this = _ok.new_okTDeviceMatchInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_okTDeviceMatchInfo
    __del__ = lambda self : None;
okTDeviceMatchInfo_swigregister = _ok.okTDeviceMatchInfo_swigregister
okTDeviceMatchInfo_swigregister(okTDeviceMatchInfo)

class okTDeviceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, okTDeviceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, okTDeviceInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceID"] = _ok.okTDeviceInfo_deviceID_set
    __swig_getmethods__["deviceID"] = _ok.okTDeviceInfo_deviceID_get
    if _newclass:deviceID = _swig_property(_ok.okTDeviceInfo_deviceID_get, _ok.okTDeviceInfo_deviceID_set)
    __swig_setmethods__["serialNumber"] = _ok.okTDeviceInfo_serialNumber_set
    __swig_getmethods__["serialNumber"] = _ok.okTDeviceInfo_serialNumber_get
    if _newclass:serialNumber = _swig_property(_ok.okTDeviceInfo_serialNumber_get, _ok.okTDeviceInfo_serialNumber_set)
    __swig_setmethods__["productName"] = _ok.okTDeviceInfo_productName_set
    __swig_getmethods__["productName"] = _ok.okTDeviceInfo_productName_get
    if _newclass:productName = _swig_property(_ok.okTDeviceInfo_productName_get, _ok.okTDeviceInfo_productName_set)
    __swig_setmethods__["productID"] = _ok.okTDeviceInfo_productID_set
    __swig_getmethods__["productID"] = _ok.okTDeviceInfo_productID_get
    if _newclass:productID = _swig_property(_ok.okTDeviceInfo_productID_get, _ok.okTDeviceInfo_productID_set)
    __swig_setmethods__["deviceInterface"] = _ok.okTDeviceInfo_deviceInterface_set
    __swig_getmethods__["deviceInterface"] = _ok.okTDeviceInfo_deviceInterface_get
    if _newclass:deviceInterface = _swig_property(_ok.okTDeviceInfo_deviceInterface_get, _ok.okTDeviceInfo_deviceInterface_set)
    __swig_setmethods__["usbSpeed"] = _ok.okTDeviceInfo_usbSpeed_set
    __swig_getmethods__["usbSpeed"] = _ok.okTDeviceInfo_usbSpeed_get
    if _newclass:usbSpeed = _swig_property(_ok.okTDeviceInfo_usbSpeed_get, _ok.okTDeviceInfo_usbSpeed_set)
    __swig_setmethods__["deviceMajorVersion"] = _ok.okTDeviceInfo_deviceMajorVersion_set
    __swig_getmethods__["deviceMajorVersion"] = _ok.okTDeviceInfo_deviceMajorVersion_get
    if _newclass:deviceMajorVersion = _swig_property(_ok.okTDeviceInfo_deviceMajorVersion_get, _ok.okTDeviceInfo_deviceMajorVersion_set)
    __swig_setmethods__["deviceMinorVersion"] = _ok.okTDeviceInfo_deviceMinorVersion_set
    __swig_getmethods__["deviceMinorVersion"] = _ok.okTDeviceInfo_deviceMinorVersion_get
    if _newclass:deviceMinorVersion = _swig_property(_ok.okTDeviceInfo_deviceMinorVersion_get, _ok.okTDeviceInfo_deviceMinorVersion_set)
    __swig_setmethods__["hostInterfaceMajorVersion"] = _ok.okTDeviceInfo_hostInterfaceMajorVersion_set
    __swig_getmethods__["hostInterfaceMajorVersion"] = _ok.okTDeviceInfo_hostInterfaceMajorVersion_get
    if _newclass:hostInterfaceMajorVersion = _swig_property(_ok.okTDeviceInfo_hostInterfaceMajorVersion_get, _ok.okTDeviceInfo_hostInterfaceMajorVersion_set)
    __swig_setmethods__["hostInterfaceMinorVersion"] = _ok.okTDeviceInfo_hostInterfaceMinorVersion_set
    __swig_getmethods__["hostInterfaceMinorVersion"] = _ok.okTDeviceInfo_hostInterfaceMinorVersion_get
    if _newclass:hostInterfaceMinorVersion = _swig_property(_ok.okTDeviceInfo_hostInterfaceMinorVersion_get, _ok.okTDeviceInfo_hostInterfaceMinorVersion_set)
    __swig_setmethods__["isPLL22150Supported"] = _ok.okTDeviceInfo_isPLL22150Supported_set
    __swig_getmethods__["isPLL22150Supported"] = _ok.okTDeviceInfo_isPLL22150Supported_get
    if _newclass:isPLL22150Supported = _swig_property(_ok.okTDeviceInfo_isPLL22150Supported_get, _ok.okTDeviceInfo_isPLL22150Supported_set)
    __swig_setmethods__["isPLL22393Supported"] = _ok.okTDeviceInfo_isPLL22393Supported_set
    __swig_getmethods__["isPLL22393Supported"] = _ok.okTDeviceInfo_isPLL22393Supported_get
    if _newclass:isPLL22393Supported = _swig_property(_ok.okTDeviceInfo_isPLL22393Supported_get, _ok.okTDeviceInfo_isPLL22393Supported_set)
    __swig_setmethods__["isFrontPanelEnabled"] = _ok.okTDeviceInfo_isFrontPanelEnabled_set
    __swig_getmethods__["isFrontPanelEnabled"] = _ok.okTDeviceInfo_isFrontPanelEnabled_get
    if _newclass:isFrontPanelEnabled = _swig_property(_ok.okTDeviceInfo_isFrontPanelEnabled_get, _ok.okTDeviceInfo_isFrontPanelEnabled_set)
    __swig_setmethods__["wireWidth"] = _ok.okTDeviceInfo_wireWidth_set
    __swig_getmethods__["wireWidth"] = _ok.okTDeviceInfo_wireWidth_get
    if _newclass:wireWidth = _swig_property(_ok.okTDeviceInfo_wireWidth_get, _ok.okTDeviceInfo_wireWidth_set)
    __swig_setmethods__["triggerWidth"] = _ok.okTDeviceInfo_triggerWidth_set
    __swig_getmethods__["triggerWidth"] = _ok.okTDeviceInfo_triggerWidth_get
    if _newclass:triggerWidth = _swig_property(_ok.okTDeviceInfo_triggerWidth_get, _ok.okTDeviceInfo_triggerWidth_set)
    __swig_setmethods__["pipeWidth"] = _ok.okTDeviceInfo_pipeWidth_set
    __swig_getmethods__["pipeWidth"] = _ok.okTDeviceInfo_pipeWidth_get
    if _newclass:pipeWidth = _swig_property(_ok.okTDeviceInfo_pipeWidth_get, _ok.okTDeviceInfo_pipeWidth_set)
    __swig_setmethods__["registerAddressWidth"] = _ok.okTDeviceInfo_registerAddressWidth_set
    __swig_getmethods__["registerAddressWidth"] = _ok.okTDeviceInfo_registerAddressWidth_get
    if _newclass:registerAddressWidth = _swig_property(_ok.okTDeviceInfo_registerAddressWidth_get, _ok.okTDeviceInfo_registerAddressWidth_set)
    __swig_setmethods__["registerDataWidth"] = _ok.okTDeviceInfo_registerDataWidth_set
    __swig_getmethods__["registerDataWidth"] = _ok.okTDeviceInfo_registerDataWidth_get
    if _newclass:registerDataWidth = _swig_property(_ok.okTDeviceInfo_registerDataWidth_get, _ok.okTDeviceInfo_registerDataWidth_set)
    __swig_setmethods__["flashSystem"] = _ok.okTDeviceInfo_flashSystem_set
    __swig_getmethods__["flashSystem"] = _ok.okTDeviceInfo_flashSystem_get
    if _newclass:flashSystem = _swig_property(_ok.okTDeviceInfo_flashSystem_get, _ok.okTDeviceInfo_flashSystem_set)
    __swig_setmethods__["flashFPGA"] = _ok.okTDeviceInfo_flashFPGA_set
    __swig_getmethods__["flashFPGA"] = _ok.okTDeviceInfo_flashFPGA_get
    if _newclass:flashFPGA = _swig_property(_ok.okTDeviceInfo_flashFPGA_get, _ok.okTDeviceInfo_flashFPGA_set)
    def __init__(self): 
        this = _ok.new_okTDeviceInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_okTDeviceInfo
    __del__ = lambda self : None;
okTDeviceInfo_swigregister = _ok.okTDeviceInfo_swigregister
okTDeviceInfo_swigregister(okTDeviceInfo)

class okCPLL22150(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, okCPLL22150, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, okCPLL22150, name)
    __repr__ = _swig_repr
    ClkSrc_Ref = _ok.okCPLL22150_ClkSrc_Ref
    ClkSrc_Div1ByN = _ok.okCPLL22150_ClkSrc_Div1ByN
    ClkSrc_Div1By2 = _ok.okCPLL22150_ClkSrc_Div1By2
    ClkSrc_Div1By3 = _ok.okCPLL22150_ClkSrc_Div1By3
    ClkSrc_Div2ByN = _ok.okCPLL22150_ClkSrc_Div2ByN
    ClkSrc_Div2By2 = _ok.okCPLL22150_ClkSrc_Div2By2
    ClkSrc_Div2By4 = _ok.okCPLL22150_ClkSrc_Div2By4
    DivSrc_Ref = _ok.okCPLL22150_DivSrc_Ref
    DivSrc_VCO = _ok.okCPLL22150_DivSrc_VCO
    def __init__(self): 
        this = _ok.new_okCPLL22150()
        try: self.this.append(this)
        except: self.this = this
    def SetCrystalLoad(self, *args): return _ok.okCPLL22150_SetCrystalLoad(self, *args)
    def SetReference(self, *args): return _ok.okCPLL22150_SetReference(self, *args)
    def GetReference(self): return _ok.okCPLL22150_GetReference(self)
    def SetVCOParameters(self, *args): return _ok.okCPLL22150_SetVCOParameters(self, *args)
    def GetVCOP(self): return _ok.okCPLL22150_GetVCOP(self)
    def GetVCOQ(self): return _ok.okCPLL22150_GetVCOQ(self)
    def GetVCOFrequency(self): return _ok.okCPLL22150_GetVCOFrequency(self)
    def SetDiv1(self, *args): return _ok.okCPLL22150_SetDiv1(self, *args)
    def SetDiv2(self, *args): return _ok.okCPLL22150_SetDiv2(self, *args)
    def GetDiv1Source(self): return _ok.okCPLL22150_GetDiv1Source(self)
    def GetDiv2Source(self): return _ok.okCPLL22150_GetDiv2Source(self)
    def GetDiv1Divider(self): return _ok.okCPLL22150_GetDiv1Divider(self)
    def GetDiv2Divider(self): return _ok.okCPLL22150_GetDiv2Divider(self)
    def SetOutputSource(self, *args): return _ok.okCPLL22150_SetOutputSource(self, *args)
    def SetOutputEnable(self, *args): return _ok.okCPLL22150_SetOutputEnable(self, *args)
    def GetOutputSource(self, *args): return _ok.okCPLL22150_GetOutputSource(self, *args)
    def GetOutputFrequency(self, *args): return _ok.okCPLL22150_GetOutputFrequency(self, *args)
    def IsOutputEnabled(self, *args): return _ok.okCPLL22150_IsOutputEnabled(self, *args)
    __swig_destroy__ = _ok.delete_okCPLL22150
    __del__ = lambda self : None;
okCPLL22150_swigregister = _ok.okCPLL22150_swigregister
okCPLL22150_swigregister(okCPLL22150)

class okCPLL22393(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, okCPLL22393, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, okCPLL22393, name)
    __repr__ = _swig_repr
    ClkSrc_Ref = _ok.okCPLL22393_ClkSrc_Ref
    ClkSrc_PLL0_0 = _ok.okCPLL22393_ClkSrc_PLL0_0
    ClkSrc_PLL0_180 = _ok.okCPLL22393_ClkSrc_PLL0_180
    ClkSrc_PLL1_0 = _ok.okCPLL22393_ClkSrc_PLL1_0
    ClkSrc_PLL1_180 = _ok.okCPLL22393_ClkSrc_PLL1_180
    ClkSrc_PLL2_0 = _ok.okCPLL22393_ClkSrc_PLL2_0
    ClkSrc_PLL2_180 = _ok.okCPLL22393_ClkSrc_PLL2_180
    def __init__(self): 
        this = _ok.new_okCPLL22393()
        try: self.this.append(this)
        except: self.this = this
    def SetCrystalLoad(self, *args): return _ok.okCPLL22393_SetCrystalLoad(self, *args)
    def SetReference(self, *args): return _ok.okCPLL22393_SetReference(self, *args)
    def SetPLLParameters(self, *args): return _ok.okCPLL22393_SetPLLParameters(self, *args)
    def SetPLLLF(self, *args): return _ok.okCPLL22393_SetPLLLF(self, *args)
    def SetOutputDivider(self, *args): return _ok.okCPLL22393_SetOutputDivider(self, *args)
    def SetOutputSource(self, *args): return _ok.okCPLL22393_SetOutputSource(self, *args)
    def SetOutputEnable(self, *args): return _ok.okCPLL22393_SetOutputEnable(self, *args)
    def GetReference(self): return _ok.okCPLL22393_GetReference(self)
    def GetPLLP(self, *args): return _ok.okCPLL22393_GetPLLP(self, *args)
    def GetPLLQ(self, *args): return _ok.okCPLL22393_GetPLLQ(self, *args)
    def GetPLLFrequency(self, *args): return _ok.okCPLL22393_GetPLLFrequency(self, *args)
    def GetOutputDivider(self, *args): return _ok.okCPLL22393_GetOutputDivider(self, *args)
    def GetOutputSource(self, *args): return _ok.okCPLL22393_GetOutputSource(self, *args)
    def GetOutputFrequency(self, *args): return _ok.okCPLL22393_GetOutputFrequency(self, *args)
    def IsOutputEnabled(self, *args): return _ok.okCPLL22393_IsOutputEnabled(self, *args)
    def IsPLLEnabled(self, *args): return _ok.okCPLL22393_IsPLLEnabled(self, *args)
    __swig_destroy__ = _ok.delete_okCPLL22393
    __del__ = lambda self : None;
okCPLL22393_swigregister = _ok.okCPLL22393_swigregister
okCPLL22393_swigregister(okCPLL22393)

class okCFrontPanel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, okCFrontPanel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, okCFrontPanel, name)
    __repr__ = _swig_repr
    brdUnknown = _ok.okCFrontPanel_brdUnknown
    brdXEM3001v1 = _ok.okCFrontPanel_brdXEM3001v1
    brdXEM3001v2 = _ok.okCFrontPanel_brdXEM3001v2
    brdXEM3010 = _ok.okCFrontPanel_brdXEM3010
    brdXEM3005 = _ok.okCFrontPanel_brdXEM3005
    brdXEM3001CL = _ok.okCFrontPanel_brdXEM3001CL
    brdXEM3020 = _ok.okCFrontPanel_brdXEM3020
    brdXEM3050 = _ok.okCFrontPanel_brdXEM3050
    brdXEM9002 = _ok.okCFrontPanel_brdXEM9002
    brdXEM3001RB = _ok.okCFrontPanel_brdXEM3001RB
    brdXEM5010 = _ok.okCFrontPanel_brdXEM5010
    brdXEM6110LX45 = _ok.okCFrontPanel_brdXEM6110LX45
    brdXEM6001 = _ok.okCFrontPanel_brdXEM6001
    brdXEM6010LX45 = _ok.okCFrontPanel_brdXEM6010LX45
    brdXEM6010LX150 = _ok.okCFrontPanel_brdXEM6010LX150
    brdXEM6110LX150 = _ok.okCFrontPanel_brdXEM6110LX150
    brdXEM6006LX9 = _ok.okCFrontPanel_brdXEM6006LX9
    brdXEM6006LX16 = _ok.okCFrontPanel_brdXEM6006LX16
    brdXEM6006LX25 = _ok.okCFrontPanel_brdXEM6006LX25
    brdXEM5010LX110 = _ok.okCFrontPanel_brdXEM5010LX110
    brdZEM4310 = _ok.okCFrontPanel_brdZEM4310
    brdXEM6310LX45 = _ok.okCFrontPanel_brdXEM6310LX45
    brdXEM6310LX150 = _ok.okCFrontPanel_brdXEM6310LX150
    brdXEM6110v2LX45 = _ok.okCFrontPanel_brdXEM6110v2LX45
    brdXEM6110v2LX150 = _ok.okCFrontPanel_brdXEM6110v2LX150
    brdXEM6002LX9 = _ok.okCFrontPanel_brdXEM6002LX9
    brdXEM6310MTLX45T = _ok.okCFrontPanel_brdXEM6310MTLX45T
    brdXEM6320LX130T = _ok.okCFrontPanel_brdXEM6320LX130T
    NoError = _ok.okCFrontPanel_NoError
    Failed = _ok.okCFrontPanel_Failed
    Timeout = _ok.okCFrontPanel_Timeout
    DoneNotHigh = _ok.okCFrontPanel_DoneNotHigh
    TransferError = _ok.okCFrontPanel_TransferError
    CommunicationError = _ok.okCFrontPanel_CommunicationError
    InvalidBitstream = _ok.okCFrontPanel_InvalidBitstream
    FileError = _ok.okCFrontPanel_FileError
    DeviceNotOpen = _ok.okCFrontPanel_DeviceNotOpen
    InvalidEndpoint = _ok.okCFrontPanel_InvalidEndpoint
    InvalidBlockSize = _ok.okCFrontPanel_InvalidBlockSize
    I2CRestrictedAddress = _ok.okCFrontPanel_I2CRestrictedAddress
    I2CBitError = _ok.okCFrontPanel_I2CBitError
    I2CNack = _ok.okCFrontPanel_I2CNack
    I2CUnknownStatus = _ok.okCFrontPanel_I2CUnknownStatus
    UnsupportedFeature = _ok.okCFrontPanel_UnsupportedFeature
    FIFOUnderflow = _ok.okCFrontPanel_FIFOUnderflow
    FIFOOverflow = _ok.okCFrontPanel_FIFOOverflow
    DataAlignmentError = _ok.okCFrontPanel_DataAlignmentError
    InvalidResetProfile = _ok.okCFrontPanel_InvalidResetProfile
    InvalidParameter = _ok.okCFrontPanel_InvalidParameter
    def __init__(self): 
        this = _ok.new_okCFrontPanel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_okCFrontPanel
    __del__ = lambda self : None;
    def ActivateTriggerIn(self, *args): return _ok.okCFrontPanel_ActivateTriggerIn(self, *args)
    def ConfigureFPGA(self, *args): return _ok.okCFrontPanel_ConfigureFPGA(self, *args)
    def EnableAsynchronousTransfers(self, *args): return _ok.okCFrontPanel_EnableAsynchronousTransfers(self, *args)
    def GetBoardModel(self): return _ok.okCFrontPanel_GetBoardModel(self)
    def GetBoardModelString(self, *args): return _ok.okCFrontPanel_GetBoardModelString(self, *args)
    def GetDeviceCount(self): return _ok.okCFrontPanel_GetDeviceCount(self)
    def GetDeviceInfo(self, *args): return _ok.okCFrontPanel_GetDeviceInfo(self, *args)
    def GetFPGABootResetProfile(self, *args): return _ok.okCFrontPanel_GetFPGABootResetProfile(self, *args)
    def GetFPGAJTAGResetProfile(self, *args): return _ok.okCFrontPanel_GetFPGAJTAGResetProfile(self, *args)
    def SetFPGABootResetProfile(self, *args): return _ok.okCFrontPanel_SetFPGABootResetProfile(self, *args)
    def SetFPGAJTAGResetProfile(self, *args): return _ok.okCFrontPanel_SetFPGAJTAGResetProfile(self, *args)
    def FlashEraseSector(self, *args): return _ok.okCFrontPanel_FlashEraseSector(self, *args)
    def ReadRegister(self, *args): return _ok.okCFrontPanel_ReadRegister(self, *args)
    def ReadRegisterSet(self, *args): return _ok.okCFrontPanel_ReadRegisterSet(self, *args)
    def WriteRegister(self, *args): return _ok.okCFrontPanel_WriteRegister(self, *args)
    def WriteRegisterSet(self, *args): return _ok.okCFrontPanel_WriteRegisterSet(self, *args)
    def GetWireInValue(self, *args): return _ok.okCFrontPanel_GetWireInValue(self, *args)
    def GetDeviceID(self): return _ok.okCFrontPanel_GetDeviceID(self)
    def GetDeviceListModel(self, *args): return _ok.okCFrontPanel_GetDeviceListModel(self, *args)
    def GetDeviceListSerial(self, *args): return _ok.okCFrontPanel_GetDeviceListSerial(self, *args)
    def GetDeviceMajorVersion(self): return _ok.okCFrontPanel_GetDeviceMajorVersion(self)
    def GetDeviceMinorVersion(self): return _ok.okCFrontPanel_GetDeviceMinorVersion(self)
    def GetEepromPLL22150Configuration(self, *args): return _ok.okCFrontPanel_GetEepromPLL22150Configuration(self, *args)
    def GetEepromPLL22393Configuration(self, *args): return _ok.okCFrontPanel_GetEepromPLL22393Configuration(self, *args)
    def GetPLL22150Configuration(self, *args): return _ok.okCFrontPanel_GetPLL22150Configuration(self, *args)
    def GetPLL22393Configuration(self, *args): return _ok.okCFrontPanel_GetPLL22393Configuration(self, *args)
    def GetSerialNumber(self): return _ok.okCFrontPanel_GetSerialNumber(self)
    def GetWireOutValue(self, *args): return _ok.okCFrontPanel_GetWireOutValue(self, *args)
    def GetHostInterfaceWidth(self): return _ok.okCFrontPanel_GetHostInterfaceWidth(self)
    def IsHighSpeed(self): return _ok.okCFrontPanel_IsHighSpeed(self)
    def IsFrontPanel3Supported(self): return _ok.okCFrontPanel_IsFrontPanel3Supported(self)
    def IsFrontPanelEnabled(self): return _ok.okCFrontPanel_IsFrontPanelEnabled(self)
    def IsOpen(self): return _ok.okCFrontPanel_IsOpen(self)
    def IsTriggered(self, *args): return _ok.okCFrontPanel_IsTriggered(self, *args)
    def LoadDefaultPLLConfiguration(self): return _ok.okCFrontPanel_LoadDefaultPLLConfiguration(self)
    def OpenBySerial(self, *args): return _ok.okCFrontPanel_OpenBySerial(self, *args)
    def ResetFPGA(self): return _ok.okCFrontPanel_ResetFPGA(self)
    def SetBTPipePollingInterval(self, *args): return _ok.okCFrontPanel_SetBTPipePollingInterval(self, *args)
    def SetDeviceID(self, *args): return _ok.okCFrontPanel_SetDeviceID(self, *args)
    def SetEepromPLL22150Configuration(self, *args): return _ok.okCFrontPanel_SetEepromPLL22150Configuration(self, *args)
    def SetEepromPLL22393Configuration(self, *args): return _ok.okCFrontPanel_SetEepromPLL22393Configuration(self, *args)
    def SetPLL22150Configuration(self, *args): return _ok.okCFrontPanel_SetPLL22150Configuration(self, *args)
    def SetPLL22393Configuration(self, *args): return _ok.okCFrontPanel_SetPLL22393Configuration(self, *args)
    def SetTimeout(self, *args): return _ok.okCFrontPanel_SetTimeout(self, *args)
    def SetWireInValue(self, *args): return _ok.okCFrontPanel_SetWireInValue(self, *args)
    def UpdateTriggerOuts(self): return _ok.okCFrontPanel_UpdateTriggerOuts(self)
    def UpdateWireIns(self): return _ok.okCFrontPanel_UpdateWireIns(self)
    def UpdateWireOuts(self): return _ok.okCFrontPanel_UpdateWireOuts(self)
    def FlashWrite(self, *args): return _ok.okCFrontPanel_FlashWrite(self, *args)
    def FlashRead(self, *args): return _ok.okCFrontPanel_FlashRead(self, *args)
    def WriteToPipeIn(self, *args): return _ok.okCFrontPanel_WriteToPipeIn(self, *args)
    def ReadFromPipeOut(self, *args): return _ok.okCFrontPanel_ReadFromPipeOut(self, *args)
    def WriteToBlockPipeIn(self, *args): return _ok.okCFrontPanel_WriteToBlockPipeIn(self, *args)
    def ReadFromBlockPipeOut(self, *args): return _ok.okCFrontPanel_ReadFromBlockPipeOut(self, *args)
    def WriteToPipeInThr(self, *args): return _ok.okCFrontPanel_WriteToPipeInThr(self, *args)
    def ReadFromPipeOutThr(self, *args): return _ok.okCFrontPanel_ReadFromPipeOutThr(self, *args)
    def WriteToBlockPipeInThr(self, *args): return _ok.okCFrontPanel_WriteToBlockPipeInThr(self, *args)
    def ReadFromBlockPipeOutThr(self, *args): return _ok.okCFrontPanel_ReadFromBlockPipeOutThr(self, *args)
    def ReadI2C(self, *args): return _ok.okCFrontPanel_ReadI2C(self, *args)
    def WriteI2C(self, *args): return _ok.okCFrontPanel_WriteI2C(self, *args)
okCFrontPanel_swigregister = _ok.okCFrontPanel_swigregister
okCFrontPanel_swigregister(okCFrontPanel)

class FrontPanel(okCFrontPanel):
    __swig_setmethods__ = {}
    for _s in [okCFrontPanel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrontPanel, name, value)
    __swig_getmethods__ = {}
    for _s in [okCFrontPanel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrontPanel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ok.new_FrontPanel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_FrontPanel
    __del__ = lambda self : None;
FrontPanel_swigregister = _ok.FrontPanel_swigregister
FrontPanel_swigregister(FrontPanel)

class PLL22150(okCPLL22150):
    __swig_setmethods__ = {}
    for _s in [okCPLL22150]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLL22150, name, value)
    __swig_getmethods__ = {}
    for _s in [okCPLL22150]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PLL22150, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ok.new_PLL22150()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_PLL22150
    __del__ = lambda self : None;
PLL22150_swigregister = _ok.PLL22150_swigregister
PLL22150_swigregister(PLL22150)

class PLL22393(okCPLL22393):
    __swig_setmethods__ = {}
    for _s in [okCPLL22393]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLL22393, name, value)
    __swig_getmethods__ = {}
    for _s in [okCPLL22393]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PLL22393, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ok.new_PLL22393()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ok.delete_PLL22393
    __del__ = lambda self : None;
PLL22393_swigregister = _ok.PLL22393_swigregister
PLL22393_swigregister(PLL22393)

# This file is compatible with both classic and new-style classes.


